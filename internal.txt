<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Internal Interpretation Tool</title>
    <style>
        body { font-family: sans-serif; line-height: 1.6; padding: 20px; }
        h1, h2 { margin-bottom: 20px; }
        button { padding: 10px 15px; background-color: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; margin-right: 10px; font-size: 1em; }
        button:hover { background-color: #0056b3; }
        button:disabled { background-color: #cccccc; cursor: not-allowed; }
        #fetchBtn { margin-bottom: 20px; }
        #pendingTable { border-collapse: collapse; width: 100%; margin-top: 20px; }
        #pendingTable th, #pendingTable td { border: 1px solid #ddd; padding: 12px; text-align: left; vertical-align: top; }
        #pendingTable th { background-color: #f2f2f2; }
        #pendingTable textarea { width: 95%; min-height: 150px; margin-top: 5px; font-family: monospace; font-size: 0.9em; border: 1px solid #ccc; padding: 5px; }
        .record-id { font-family: monospace; font-size: 0.9em; }
        .submit-status { display: inline-block; margin-left: 10px; font-size: 0.9em; font-style: italic; }
        #loadingMessage, #errorMessage { margin-top: 15px; padding: 10px; border-radius: 4px; }
        #loadingMessage { background-color: #e9ecef; }
        #errorMessage { background-color: #f8d7da; color: #721c24; }
        .hidden { display: none; }
        td a { display: inline-block; margin-bottom: 5px;} /* Style links slightly */
    </style>
</head>
<body>

    <h1>Internal Interpretation Tool</h1>

    <button id="fetchBtn">Fetch Pending Invoices</button>

    <div id="loadingMessage" class="hidden">Loading pending invoices...</div>
    <div id="errorMessage" class="hidden"></div>

    <table id="pendingTable">
        <thead>
            <tr>
                <th>Record ID</th>
                <th>Invoice File(s)</th>
                <th>Detailed JSON Interpretation</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody id="pendingBody">
            <!-- Rows will be inserted here by JavaScript -->
        </tbody>
    </table>

    <script>
        // --- Configuration ---
        // !!! REPLACE THESE PLACEHOLDERS WITH YOUR ACTUAL VALUES !!!
        const AIRTABLE_BASE_ID = 'appSeVr6NANwirG49';
        const AIRTABLE_TOKEN = 'patZ2JLQrRLqugVib.af1f9a0d7a3ab595f1d552404fad36ea30a9d1171e58c8103f84b83a67dc9c6b';
        // !!! --- --- --- --- --- --- --- --- --- --- --- --- --- !!!
        // 4. SECURITY WARNING: Hardcoding the token here is insecure for production!

        const AIRTABLE_TABLE_NAME = 'Invoices';
        // ** MODIFIED URL TO INCLUDE FileWidgetInfo_Second **
        const filterFormula = encodeURIComponent("{Status}='Pending'");
        const airtableListUrl = `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_NAME}?filterByFormula=${filterFormula}&fields%5B%5D=FileWidgetInfo&fields%5B%5D=Status&fields%5B%5D=FileWidgetInfo_Second`; // Added new field


        // --- DOM Elements ---
        const fetchBtn = document.getElementById('fetchBtn');
        const tableBody = document.getElementById('pendingBody');
        const loadingMessage = document.getElementById('loadingMessage');
        const errorMessage = document.getElementById('errorMessage');

        // --- Functions ---

        // ** NEW HELPER FUNCTION to create file links **
        function createFileLink(fileInfoString, defaultText = "File Info") {
            if (!fileInfoString) {
                return null; // Return null if no string provided
            }
            try {
                const fileInfo = JSON.parse(fileInfoString);
                if (fileInfo.cdnUrl) {
                    const fileName = fileInfo.name || defaultText;
                    // Sanitize file name slightly for display (optional)
                    const displayFileName = fileName.replace(/</g, "<").replace(/>/g, ">");
                    return `<a href="${fileInfo.cdnUrl}" target="_blank" rel="noopener noreferrer">${displayFileName}</a>`;
                } else {
                    console.warn("File info parsed but missing cdnUrl:", fileInfo);
                    return `<span>${defaultText} (Missing URL)</span>`;
                }
            } catch (parseError) {
                console.warn(`Could not parse FileWidgetInfo string:`, fileInfoString, parseError);
                return `<span>${defaultText} (Invalid Info)</span>`;
            }
        }

        // Function to fetch pending invoices from Airtable
        async function fetchPendingInvoices() {
            loadingMessage.classList.remove('hidden');
            errorMessage.classList.add('hidden');
            tableBody.innerHTML = '';
            fetchBtn.disabled = true;

            try {
                const response = await fetch(airtableListUrl, { // URL now includes FileWidgetInfo_Second
                    method: 'GET',
                    headers: { 'Authorization': `Bearer ${AIRTABLE_TOKEN}` }
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(`Airtable API Error (${response.status}): ${errorData?.error?.message || response.statusText}`);
                }

                const data = await response.json();
                displayInvoices(data.records || []);

            } catch (error) {
                console.error("Error fetching from Airtable:", error);
                errorMessage.textContent = `Error fetching invoices: ${error.message}`;
                errorMessage.classList.remove('hidden');
            } finally {
                loadingMessage.classList.add('hidden');
                fetchBtn.disabled = false;
            }
        }

        // ** MODIFIED displayInvoices function **
        function displayInvoices(records) {
            if (records.length === 0) {
                tableBody.innerHTML = '<tr><td colspan="4">No pending invoices found.</td></tr>';
                return;
            }

            records.forEach(record => {
                const row = tableBody.insertRow();
                row.id = `row-${record.id}`;

                const cellId = row.insertCell();
                const cellFile = row.insertCell(); // Cell for file links
                const cellJson = row.insertCell();
                const cellAction = row.insertCell();

                // Column 1: Record ID
                cellId.classList.add('record-id');
                cellId.textContent = record.id;

                // Column 2: File Link(s) - Using the helper function
                const link1 = createFileLink(record.fields.FileWidgetInfo, "File 1");
                const link2 = createFileLink(record.fields.FileWidgetInfo_Second, "File 2");

                let combinedLinks = "";
                if (link1 && link2) {
                    combinedLinks = `${link1}<br>${link2}`; // Show both with a line break
                } else if (link1) {
                    combinedLinks = link1; // Show only first
                } else if (link2) {
                    combinedLinks = link2; // Show only second (unlikely case maybe?)
                } else {
                    combinedLinks = "N/A"; // Neither found or error
                }
                cellFile.innerHTML = combinedLinks;


                // Column 3: Textarea for JSON (No change)
                cellJson.innerHTML = `<textarea id="json-${record.id}" placeholder="Paste detailed JSON interpretation here..."></textarea>`;

                // Column 4: Submit Button & Status (No change)
                cellAction.innerHTML = `
                    <button class="submit-btn" data-record-id="${record.id}">Submit Interpretation</button>
                    <span class="submit-status" id="status-${record.id}"></span>
                `;
            });
        }

        // Function to handle submitting the interpretation (No change needed here)
        async function submitInterpretation(recordId) {
            const submitButton = document.querySelector(`button[data-record-id="${recordId}"]`);
            const jsonTextArea = document.getElementById(`json-${recordId}`);
            const statusSpan = document.getElementById(`status-${recordId}`);

            if (!jsonTextArea || !submitButton || !statusSpan) {
                console.error(`Could not find elements for record ${recordId}`);
                alert(`Error: Could not find elements for record ${recordId}`);
                return;
            }

            const jsonText = jsonTextArea.value.trim();
            if (!jsonText) {
                alert('Please paste the JSON interpretation into the text area.');
                return;
            }

            let parsedJson;
            try {
                parsedJson = JSON.parse(jsonText);
                if (typeof parsedJson !== 'object' || parsedJson === null ) {
                     throw new Error('Input is not a valid JSON object or array.');
                }
            } catch (error) {
                console.error("Invalid JSON:", error);
                alert(`Invalid JSON detected!\nError: ${error.message}\nPlease correct the JSON and try again.`);
                return;
            }

            statusSpan.textContent = 'Submitting...';
            submitButton.disabled = true;
            jsonTextArea.disabled = true;

            try {
                const response = await fetch('/api/submit-interpretation', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', },
                    body: JSON.stringify({
                        recordId: recordId,
                        detailedJson: parsedJson
                    })
                });

                const result = await response.json();

                if (!response.ok || !result.success) {
                    throw new Error(result.message || `HTTP error ${response.status}`);
                }

                statusSpan.textContent = 'Success!';
                statusSpan.style.color = 'green';
                submitButton.textContent = 'Submitted';

            } catch (error) {
                console.error('Error submitting interpretation:', error);
                statusSpan.textContent = `Error: ${error.message}`;
                statusSpan.style.color = 'red';
                submitButton.disabled = false;
                jsonTextArea.disabled = false;
            }
        }

        // --- Event Listeners ---

        fetchBtn.addEventListener('click', fetchPendingInvoices);

        tableBody.addEventListener('click', (event) => {
            if (event.target && event.target.classList.contains('submit-btn')) {
                const recordId = event.target.getAttribute('data-record-id');
                if (recordId) {
                    submitInterpretation(recordId);
                }
            }
        });

        // Optional: Fetch pending invoices automatically on page load
        // fetchPendingInvoices();

    </script>

</body>
</html>